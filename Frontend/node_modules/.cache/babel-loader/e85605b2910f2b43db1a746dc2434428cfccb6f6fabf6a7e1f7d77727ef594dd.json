{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport ViewPayslipsComp from '@/components/viewPayslipsComp.vue';\nexport default {\n  data() {\n    return {\n      fullEmployeePayrollData: [],\n      employeeInfo: [],\n      searchQuery: '',\n      // Binding the search query thing here\n      progress: 0\n    };\n  },\n  computed: {\n    employeePayrollData() {\n      return this.$store.state.payrollData; // Payroll data (no name of employee)\n    },\n    getEmployeeInfoForNameOnly() {\n      return this.$store.state.employeeInformation; // Employee data for extracting names\n    },\n    filteredEmployeeData() {\n      // This will filter the data based on the search query\n      return this.fullEmployeePayrollData.filter(employee => {\n        const query = this.searchQuery.toLowerCase();\n        return employee.name.toLowerCase().includes(query) || employee.department.toLowerCase().includes(query);\n      });\n    }\n  },\n  methods: {\n    addNameToEmployeeData() {\n      this.fullEmployeePayrollData = [...this.employeePayrollData]; // Clone payroll data\n      this.employeeInfo = this.getEmployeeInfoForNameOnly; // Employee info\n\n      // Merge name into payroll data\n      this.fullEmployeePayrollData.forEach(employeePayroll => {\n        const matchingEmployeeInfo = this.employeeInfo.find(employeeInfo => employeeInfo.employeeId === employeePayroll.employeeId);\n        if (matchingEmployeeInfo) {\n          employeePayroll.name = matchingEmployeeInfo.name;\n          employeePayroll.department = matchingEmployeeInfo.department;\n          employeePayroll.position = matchingEmployeeInfo.position;\n        }\n      });\n    },\n    sendPaySlips() {\n      this.startLoading();\n    },\n    startLoading() {\n      let interval = setInterval(() => {\n        if (this.progress < 100) {\n          this.progress += 25; // increment by 25%\n        } else {\n          clearInterval(interval); // stop interval when 100% is reached\n          alert('All payslips sent to employees');\n        }\n      }, 1000); // Update progress every second (1s)\n    }\n  },\n  components: {\n    ViewPayslipsComp\n  },\n  mounted() {\n    this.addNameToEmployeeData();\n  }\n};","map":{"version":3,"names":["ViewPayslipsComp","data","fullEmployeePayrollData","employeeInfo","searchQuery","progress","computed","employeePayrollData","$store","state","payrollData","getEmployeeInfoForNameOnly","employeeInformation","filteredEmployeeData","filter","employee","query","toLowerCase","name","includes","department","methods","addNameToEmployeeData","forEach","employeePayroll","matchingEmployeeInfo","find","employeeId","position","sendPaySlips","startLoading","interval","setInterval","clearInterval","alert","components","mounted"],"sources":["C:\\Users\\Students\\Desktop\\clone\\front-end\\Module-2-Core-Project\\Frontend\\src\\views\\PayrollView.vue"],"sourcesContent":["<template>\r\n  <div class=\"about\">\r\n    <h2  style=\"font-family: 'Roboto', sans-serif;\">Payroll</h2>\r\n    \r\n    <!-- Search Bar -->\r\n    <input type=\"text\" v-model=\"searchQuery\" class=\"form-control mb-4\" placeholder=\"Search by Name or Department...\" />\r\n\r\n    <div id=\"app\" class=\"container mt-4\">\r\n      <div class=\"row justify-content-center\">\r\n\r\n        <!-- Loop through filtered employee array -->\r\n        <div v-for=\"(employee, index) in filteredEmployeeData\" class=\"col-lg-4 mb-3\" :key=\"index\">\r\n          <div class=\"card\"> <!--'instance' created -->\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{ employee.name }} - {{ employee.department }}</h5>\r\n              <p>Hours Worked: {{ employee.hoursWorked }}</p>\r\n              <p>Leave Deductions: {{ employee.leaveDeductions }}</p>\r\n\r\n              <view-payslips-comp :employee=\"employee\" :modal-id=\"'modal-' + index\"/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n    <button @click=\"sendPaySlips()\">Send Payslips</button>\r\n    <!-- progress bar -->\r\n    <div class=\"progress\" role=\"progressbar\" aria-label=\"Basic example\" aria-valuenow=\"progress\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n  <div class=\"progress-bar\" :style=\"'width: ' + progress + '%'\"></div>\r\n</div>\r\n\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ViewPayslipsComp from '@/components/viewPayslipsComp.vue';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      fullEmployeePayrollData: [],\r\n      employeeInfo: [],\r\n      searchQuery: '', // Binding the search query thing here\r\n      progress:0,\r\n    };\r\n  },\r\n  computed: {\r\n    employeePayrollData() {\r\n      return this.$store.state.payrollData; // Payroll data (no name of employee)\r\n    },\r\n    getEmployeeInfoForNameOnly() {\r\n      return this.$store.state.employeeInformation; // Employee data for extracting names\r\n    },\r\n    filteredEmployeeData() {\r\n      // This will filter the data based on the search query\r\n      return this.fullEmployeePayrollData.filter(employee => {\r\n        const query = this.searchQuery.toLowerCase();\r\n        return (\r\n          employee.name.toLowerCase().includes(query) ||\r\n          employee.department.toLowerCase().includes(query)\r\n        );\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    addNameToEmployeeData() {\r\n      this.fullEmployeePayrollData = [...this.employeePayrollData]; // Clone payroll data\r\n      this.employeeInfo = this.getEmployeeInfoForNameOnly; // Employee info\r\n\r\n      // Merge name into payroll data\r\n      this.fullEmployeePayrollData.forEach(employeePayroll => {\r\n        const matchingEmployeeInfo = this.employeeInfo.find(\r\n          employeeInfo => employeeInfo.employeeId === employeePayroll.employeeId\r\n        );\r\n\r\n        if (matchingEmployeeInfo) {\r\n          employeePayroll.name = matchingEmployeeInfo.name;\r\n          employeePayroll.department = matchingEmployeeInfo.department;\r\n          employeePayroll.position = matchingEmployeeInfo.position;\r\n        }\r\n      });\r\n    },\r\n    sendPaySlips() {\r\n      this.startLoading()\r\n    },\r\n    startLoading() {\r\n  let interval = setInterval(() => {\r\n    if (this.progress < 100) {\r\n      this.progress += 25; // increment by 25%\r\n    } else {\r\n      clearInterval(interval); // stop interval when 100% is reached\r\n      alert('All payslips sent to employees');\r\n    }\r\n  }, 1000); // Update progress every second (1s)\r\n}\r\n  },\r\n  components: {\r\n    ViewPayslipsComp\r\n  },\r\n  mounted() {\r\n    this.addNameToEmployeeData();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.about {\r\n  font-family: 'Arial', sans-serif;\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  min-height: 100vh;\r\n}\r\n\r\nh2 {\r\n  font-size: 2.5rem;\r\n  color: #333;\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\ninput.form-control {\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 10px 15px;\r\n  font-size: 1rem;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\ninput.form-control:focus {\r\n  border-color: #007bff;\r\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.2);\r\n}\r\n\r\n.container {\r\n  width: 1200px;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  background-color: #fff;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n/* .card:hover {\r\n  transform: translateY(-5px);\r\n} */\r\n\r\n.card-body {\r\n  padding: 20px;\r\n} \r\n\r\n.card-title {\r\n  font-size: 1.2rem;\r\n  font-weight: bold;\r\n  color: #555;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.card p {\r\n  margin: 0;\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n}\r\n\r\nbutton {\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 1rem;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n  margin-top: 20px;\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.4);\r\n}\r\n\r\n.progress {\r\n  background-color: #e9ecef;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n  height: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.progress-bar {\r\n  background-color: #007bff;\r\n  height: 100%;\r\n  transition: width 0.4s ease;\r\n}\r\n\r\n.mb-3, .mb-4 {\r\n  margin-bottom: 1rem !important;\r\n}\r\n\r\n.mt-4 {\r\n  margin-top: 1.5rem !important;\r\n}\r\n\r\n.row {\r\n  margin-left: -0.5rem;\r\n  margin-right: -0.5rem;\r\n}\r\n\r\n.col-lg-4 {\r\n  padding-left: 0.5rem;\r\n  padding-right: 0.5rem;\r\n}\r\n\r\n\r\n/* Laptop (1024px) */\r\n@media (max-width: 1024px) {\r\n  .container {\r\n    width: 90%;\r\n    padding: 15px;\r\n  }\r\n\r\n  body {\r\n    font-size: 15px;\r\n  }\r\n}\r\n\r\n/* Tablet (768px) */\r\n@media (max-width: 768px) {\r\n  .container {\r\n    width: 95%;\r\n    padding: 10px;\r\n  }\r\n\r\n  body {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .header {\r\n    font-size: 18px;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n/* Mobile L (425px) */\r\n@media (max-width: 425px) {\r\n  .container {\r\n    width: 100%;\r\n    padding: 5px;\r\n  }\r\n\r\n  body {\r\n    font-size: 13px;\r\n  }\r\n\r\n  .header {\r\n    font-size: 16px;\r\n  }\r\n\r\n  .button {\r\n    width: 100%;\r\n    font-size: 14px;\r\n    padding: 10px;\r\n  }\r\n}\r\n\r\n/* Mobile M (375px) */\r\n@media (max-width: 375px) {\r\n  body {\r\n    font-size: 12px;\r\n  }\r\n\r\n  .header {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .button {\r\n    font-size: 13px;\r\n    padding: 8px;\r\n  }\r\n}\r\n\r\n/* Mobile S (320px) */\r\n@media (max-width: 320px) {\r\n  body {\r\n    font-size: 11px;\r\n  }\r\n\r\n  .header {\r\n    font-size: 12px;\r\n  }\r\n\r\n  .button {\r\n    font-size: 12px;\r\n    padding: 6px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;;;AAqCA,OAAOA,gBAAe,MAAO,mCAAmC;AAEhE,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,uBAAuB,EAAE,EAAE;MAC3BC,YAAY,EAAE,EAAE;MAChBC,WAAW,EAAE,EAAE;MAAE;MACjBC,QAAQ,EAAC;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,mBAAmBA,CAAA,EAAG;MACpB,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,WAAW,EAAE;IACxC,CAAC;IACDC,0BAA0BA,CAAA,EAAG;MAC3B,OAAO,IAAI,CAACH,MAAM,CAACC,KAAK,CAACG,mBAAmB,EAAE;IAChD,CAAC;IACDC,oBAAoBA,CAAA,EAAG;MACrB;MACA,OAAO,IAAI,CAACX,uBAAuB,CAACY,MAAM,CAACC,QAAO,IAAK;QACrD,MAAMC,KAAI,GAAI,IAAI,CAACZ,WAAW,CAACa,WAAW,CAAC,CAAC;QAC5C,OACEF,QAAQ,CAACG,IAAI,CAACD,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,KAAK,KAC1CD,QAAQ,CAACK,UAAU,CAACH,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,KAAK;MAEpD,CAAC,CAAC;IACJ;EACF,CAAC;EACDK,OAAO,EAAE;IACPC,qBAAqBA,CAAA,EAAG;MACtB,IAAI,CAACpB,uBAAsB,GAAI,CAAC,GAAG,IAAI,CAACK,mBAAmB,CAAC,EAAE;MAC9D,IAAI,CAACJ,YAAW,GAAI,IAAI,CAACQ,0BAA0B,EAAE;;MAErD;MACA,IAAI,CAACT,uBAAuB,CAACqB,OAAO,CAACC,eAAc,IAAK;QACtD,MAAMC,oBAAmB,GAAI,IAAI,CAACtB,YAAY,CAACuB,IAAI,CACjDvB,YAAW,IAAKA,YAAY,CAACwB,UAAS,KAAMH,eAAe,CAACG,UAC9D,CAAC;QAED,IAAIF,oBAAoB,EAAE;UACxBD,eAAe,CAACN,IAAG,GAAIO,oBAAoB,CAACP,IAAI;UAChDM,eAAe,CAACJ,UAAS,GAAIK,oBAAoB,CAACL,UAAU;UAC5DI,eAAe,CAACI,QAAO,GAAIH,oBAAoB,CAACG,QAAQ;QAC1D;MACF,CAAC,CAAC;IACJ,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACC,YAAY,CAAC;IACpB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACjB,IAAIC,QAAO,GAAIC,WAAW,CAAC,MAAM;QAC/B,IAAI,IAAI,CAAC3B,QAAO,GAAI,GAAG,EAAE;UACvB,IAAI,CAACA,QAAO,IAAK,EAAE,EAAE;QACvB,OAAO;UACL4B,aAAa,CAACF,QAAQ,CAAC,EAAE;UACzBG,KAAK,CAAC,gCAAgC,CAAC;QACzC;MACF,CAAC,EAAE,IAAI,CAAC,EAAE;IACZ;EACE,CAAC;EACDC,UAAU,EAAE;IACVnC;EACF,CAAC;EACDoC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACd,qBAAqB,CAAC,CAAC;EAC9B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}